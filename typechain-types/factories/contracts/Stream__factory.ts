/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Stream, StreamInterface } from "../../contracts/Stream";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "cfaV1",
    outputs: [
      {
        internalType: "contract ISuperfluid",
        name: "host",
        type: "address",
      },
      {
        internalType: "contract IConstantFlowAgreementV1",
        name: "cfa",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "contract ISuperfluid",
        name: "_host",
        type: "address",
      },
      {
        internalType: "contract ISuperfluidToken",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_streamCreator",
        type: "address",
      },
      {
        internalType: "int96",
        name: "_flowRate",
        type: "int96",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "streamCreator",
    outputs: [
      {
        internalType: "contract StreamCreator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e90806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637bcc343514610051578063af640d0f1461006d578063d3112b2e1461008b578063ef4a57d1146100aa575b600080fd5b61006b60048036038101906100669190610841565b6100c8565b005b61007561031c565b60405161008291906108dd565b60405180910390f35b610093610322565b6040516100a1929190610978565b60405180910390f35b6100b2610374565b6040516100bf91906109c2565b60405180910390f35b60006100d4600161039a565b905080156100f8576001600060016101000a81548160ff0219169083151502179055505b60015460018190555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1663b6d200de7fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd36040518263ffffffff1660e01b81526004016101c291906109f6565b602060405180830381865afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190610a4f565b73ffffffffffffffffffffffffffffffffffffffff16815250600360008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506102ba85858461048a565b80156103135760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161030a9190610ac4565b60405180910390a15b50505050505050565b60015481565b60038060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff16156104115760018260ff161480156103c957506103c7306104a7565b155b610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610b62565b60405180910390fd5b60009050610485565b8160ff1660008054906101000a900460ff1660ff1610610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045d90610b62565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6104a282848360036104ca909392919063ffffffff16565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61052484848484600067ffffffffffffffff8111156104ec576104eb610b82565b5b6040519080825280601f01601f19166020018201604052801561051e5781602001600182028036833780820191505090505b5061052a565b50505050565b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339255d5b8660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166362fc305e878988600067ffffffffffffffff8111156105ed576105ec610b82565b5b6040519080825280601f01601f19166020018201604052801561061f5781602001600182028036833780820191505090505b506040516024016106339493929190610c89565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050846040518463ffffffff1660e01b815260040161069493929190610cd5565b6000604051808303816000875af11580156106b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106dc9190610e11565b505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61070b816106f8565b811461071657600080fd5b50565b60008135905061072881610702565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107598261072e565b9050919050565b600061076b8261074e565b9050919050565b61077b81610760565b811461078657600080fd5b50565b60008135905061079881610772565b92915050565b60006107a98261074e565b9050919050565b6107b98161079e565b81146107c457600080fd5b50565b6000813590506107d6816107b0565b92915050565b6107e58161074e565b81146107f057600080fd5b50565b600081359050610802816107dc565b92915050565b600081600b0b9050919050565b61081e81610808565b811461082957600080fd5b50565b60008135905061083b81610815565b92915050565b60008060008060008060c0878903121561085e5761085d6106ee565b5b600061086c89828a01610719565b965050602061087d89828a01610789565b955050604061088e89828a016107c7565b945050606061089f89828a016107f3565b93505060806108b089828a016107f3565b92505060a06108c189828a0161082c565b9150509295509295509295565b6108d7816106f8565b82525050565b60006020820190506108f260008301846108ce565b92915050565b6000819050919050565b600061091d6109186109138461072e565b6108f8565b61072e565b9050919050565b600061092f82610902565b9050919050565b600061094182610924565b9050919050565b61095181610936565b82525050565b600061096282610924565b9050919050565b61097281610957565b82525050565b600060408201905061098d6000830185610948565b61099a6020830184610969565b9392505050565b60006109ac82610924565b9050919050565b6109bc816109a1565b82525050565b60006020820190506109d760008301846109b3565b92915050565b6000819050919050565b6109f0816109dd565b82525050565b6000602082019050610a0b60008301846109e7565b92915050565b6000610a1c8261074e565b9050919050565b610a2c81610a11565b8114610a3757600080fd5b50565b600081519050610a4981610a23565b92915050565b600060208284031215610a6557610a646106ee565b5b6000610a7384828501610a3a565b91505092915050565b6000819050919050565b600060ff82169050919050565b6000610aae610aa9610aa484610a7c565b6108f8565b610a86565b9050919050565b610abe81610a93565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610b4c602e83610adf565b9150610b5782610af0565b604082019050919050565b60006020820190508181036000830152610b7b81610b3f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610bbc82610924565b9050919050565b610bcc81610bb1565b82525050565b610bdb8161074e565b82525050565b610bea81610808565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c2a578082015181840152602081019050610c0f565b83811115610c39576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c5b82610bf0565b610c658185610bfb565b9350610c75818560208601610c0c565b610c7e81610c3f565b840191505092915050565b6000608082019050610c9e6000830187610bc3565b610cab6020830186610bd2565b610cb86040830185610be1565b8181036060830152610cca8184610c50565b905095945050505050565b6000606082019050610cea6000830186610969565b8181036020830152610cfc8185610c50565b90508181036040830152610d108184610c50565b9050949350505050565b600080fd5b600080fd5b610d2d82610c3f565b810181811067ffffffffffffffff82111715610d4c57610d4b610b82565b5b80604052505050565b6000610d5f6106e4565b9050610d6b8282610d24565b919050565b600067ffffffffffffffff821115610d8b57610d8a610b82565b5b610d9482610c3f565b9050602081019050919050565b6000610db4610daf84610d70565b610d55565b905082815260208101848484011115610dd057610dcf610d1f565b5b610ddb848285610c0c565b509392505050565b600082601f830112610df857610df7610d1a565b5b8151610e08848260208601610da1565b91505092915050565b600060208284031215610e2757610e266106ee565b5b600082015167ffffffffffffffff811115610e4557610e446106f3565b5b610e5184828501610de3565b9150509291505056fea264697066735822122078e409c03ced12c49f422584aebb5a0df10c8a1b7daf6227f50133b38b9b3ad964736f6c634300080e0033";

type StreamConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StreamConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Stream__factory extends ContractFactory {
  constructor(...args: StreamConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Stream> {
    return super.deploy(overrides || {}) as Promise<Stream>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Stream {
    return super.attach(address) as Stream;
  }
  override connect(signer: Signer): Stream__factory {
    return super.connect(signer) as Stream__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StreamInterface {
    return new utils.Interface(_abi) as StreamInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Stream {
    return new Contract(address, _abi, signerOrProvider) as Stream;
  }
}
