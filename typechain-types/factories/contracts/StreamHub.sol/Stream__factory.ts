/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Stream,
  StreamInterface,
} from "../../../contracts/StreamHub.sol/Stream";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "claimVestedTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fixVestingSchedule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "userVestedClaim",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vestedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610976806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630dfee9361461005157806398f3b12d1461006f578063b603aa641461008b578063d4ab64e0146100a9575b600080fd5b6100596100b3565b6040516100669190610518565b60405180910390f35b61008960048036038101906100849190610596565b6100b8565b005b610093610162565b6040516100a09190610518565b60405180910390f35b6100b1610171565b005b600090565b60006100c2610162565b9050610113333083600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610173909392919063ffffffff16565b61015e828260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166101fc9092919063ffffffff16565b5050565b600061016c6100b3565b905090565b565b6101f6846323b872dd60e01b858585604051602401610194939291906105d2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610282565b50505050565b61027d8363a9059cbb60e01b848460405160240161021b929190610609565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610282565b505050565b60006102e4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166103499092919063ffffffff16565b90506000815111156103445780806020019051810190610304919061066a565b610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a9061071a565b60405180910390fd5b5b505050565b60606103588484600085610361565b90509392505050565b6060824710156103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d906107ac565b60405180910390fd5b6103af85610475565b6103ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e590610818565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161041791906108b2565b60006040518083038185875af1925050503d8060008114610454576040519150601f19603f3d011682016040523d82523d6000602084013e610459565b606091505b5091509150610469828286610498565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156104a8578290506104f8565b6000835111156104bb5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef919061091e565b60405180910390fd5b9392505050565b6000819050919050565b610512816104ff565b82525050565b600060208201905061052d6000830184610509565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061056382610538565b9050919050565b61057381610558565b811461057e57600080fd5b50565b6000813590506105908161056a565b92915050565b6000602082840312156105ac576105ab610533565b5b60006105ba84828501610581565b91505092915050565b6105cc81610558565b82525050565b60006060820190506105e760008301866105c3565b6105f460208301856105c3565b6106016040830184610509565b949350505050565b600060408201905061061e60008301856105c3565b61062b6020830184610509565b9392505050565b60008115159050919050565b61064781610632565b811461065257600080fd5b50565b6000815190506106648161063e565b92915050565b6000602082840312156106805761067f610533565b5b600061068e84828501610655565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610704602a83610697565b915061070f826106a8565b604082019050919050565b60006020820190508181036000830152610733816106f7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610796602683610697565b91506107a18261073a565b604082019050919050565b600060208201905081810360008301526107c581610789565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610802601d83610697565b915061080d826107cc565b602082019050919050565b60006020820190508181036000830152610831816107f5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561086c578082015181840152602081019050610851565b8381111561087b576000848401525b50505050565b600061088c82610838565b6108968185610843565b93506108a681856020860161084e565b80840191505092915050565b60006108be8284610881565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006108f0826108c9565b6108fa8185610697565b935061090a81856020860161084e565b610913816108d4565b840191505092915050565b6000602082019050818103600083015261093881846108e5565b90509291505056fea2646970667358221220e9c735ca51f3f269f3ed6b67c5f0dbf1b6005349e2b0d108c2041b6a9c46297764736f6c634300080e0033";

type StreamConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StreamConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Stream__factory extends ContractFactory {
  constructor(...args: StreamConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Stream> {
    return super.deploy(overrides || {}) as Promise<Stream>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Stream {
    return super.attach(address) as Stream;
  }
  override connect(signer: Signer): Stream__factory {
    return super.connect(signer) as Stream__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StreamInterface {
    return new utils.Interface(_abi) as StreamInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Stream {
    return new Contract(address, _abi, signerOrProvider) as Stream;
  }
}
